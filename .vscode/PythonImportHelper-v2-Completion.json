[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "session_state",
        "importPath": "streamlit",
        "description": "streamlit",
        "isExtraImport": true,
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "keras.preprocessing",
        "description": "keras.preprocessing",
        "isExtraImport": true,
        "detail": "keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "preprocess_input",
        "importPath": "tensorflow.keras.applications.efficientnet",
        "description": "tensorflow.keras.applications.efficientnet",
        "isExtraImport": true,
        "detail": "tensorflow.keras.applications.efficientnet",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "tensorflow.keras.preprocessing",
        "description": "tensorflow.keras.preprocessing",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "ImageDataGenerator",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_recall_fscore_support",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def signup(json_file_path=\"data.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)\n        sex = st.radio(\"Sex:\", (\"Male\", \"Female\", \"Other\"))\n        password = st.text_input(\"Password:\", type=\"password\")\n        confirm_password = st.text_input(\"Confirm Password:\", type=\"password\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def check_login(username, password, json_file_path=\"data.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n        for user in data[\"users\"]:\n            if user[\"email\"] == username and user[\"password\"] == password:\n                session_state[\"logged_in\"] = True\n                session_state[\"user_info\"] = user\n                st.success(\"Login successful!\")\n                return user",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def predict(path, model):\n    classes_dir = [\"Adenocarcinoma\", \"Large cell carcinoma\", \"Normal\", \"Squamous cell carcinoma\"]\n    img = image.load_img(path, target_size=(350, 350))\n    norm_img = image.img_to_array(img) / 255\n    input_arr_img = np.array([norm_img])\n    pred = np.argmax(model.predict(input_arr_img))\n    return classes_dir[pred]\ndef generate_medical_report(predicted_label):\n    # Define class labels and corresponding medical information for lung diseases\n    lung_info = {",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_medical_report",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_medical_report(predicted_label):\n    # Define class labels and corresponding medical information for lung diseases\n    lung_info = {\n        \"Adenocarcinoma\": {\n            \"report\": \"The patient appears to have adenocarcinoma, a type of non-small cell lung cancer. Early detection and treatment are crucial for better outcomes.\",\n            \"preventative_measures\": [\n                \"Avoid smoking and exposure to secondhand smoke\",\n                \"Maintain a healthy lifestyle with a balanced diet and regular exercise\",\n                \"Regular screening for lung cancer can help in early detection\",\n            ],",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def initialize_database(json_file_path=\"data.json\"):\n    try:\n        # Check if JSON file exists\n        if not os.path.exists(json_file_path):\n            # Create an empty JSON structure\n            data = {\"users\": []}\n            with open(json_file_path, \"w\") as json_file:\n                json.dump(data, json_file)\n    except Exception as e:\n        print(f\"Error initializing database: {e}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "save_lungs_image",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def save_lungs_image(image_file, json_file_path=\"data.json\"):\n    try:\n        if image_file is None:\n            st.warning(\"No file uploaded.\")\n            return\n        if not session_state[\"logged_in\"] or not session_state[\"user_info\"]:\n            st.warning(\"Please log in before uploading images.\")\n            return\n        # Load user data from JSON file\n        with open(json_file_path, \"r\") as json_file:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_account(name, email, age, sex, password, json_file_path=\"data.json\"):\n    try:\n        # Check if the JSON file exists or is empty\n        if not os.path.exists(json_file_path) or os.stat(json_file_path).st_size == 0:\n            data = {\"users\": []}\n        else:\n            with open(json_file_path, \"r\") as json_file:\n                data = json.load(json_file)\n        # Append new user data to the JSON structure\n        user_info = {",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login(json_file_path=\"data.json\"):\n    st.title(\"Login Page\")\n    username = st.text_input(\"Username:\")\n    password = st.text_input(\"Password:\", type=\"password\")\n    login_button = st.button(\"Login\")\n    if login_button:\n        user = check_login(username, password, json_file_path)\n        if user is not None:\n            session_state[\"logged_in\"] = True\n            session_state[\"user_info\"] = user",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_user_info(email, json_file_path=\"data.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n            for user in data[\"users\"]:\n                if user[\"email\"] == email:\n                    return user\n        return None\n    except Exception as e:\n        st.error(f\"Error getting user information: {e}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "render_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def render_dashboard(user_info, json_file_path=\"data.json\"):\n    try:\n        st.title(f\"Welcome to the Dashboard, {user_info['name']}!\")\n        st.subheader(\"User Information:\")\n        st.write(f\"Name: {user_info['name']}\")\n        st.write(f\"Sex: {user_info['sex']}\")\n        st.write(f\"Age: {user_info['age']}\")\n        # Open the JSON file and check for the 'lungs' key\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "fetch_precautions",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def fetch_precautions(user_info):\n    return (\n        user_info[\"precautions\"]\n        if user_info[\"precautions\"] is not None\n        else \"Please upload lungs images and generate a report.\"\n    )\ndef main(json_file_path=\"data.json\"):\n    st.sidebar.title(\"Lungs CT-Scan disease prediction system\")\n    page = st.sidebar.radio(\n        \"Go to\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main(json_file_path=\"data.json\"):\n    st.sidebar.title(\"Lungs CT-Scan disease prediction system\")\n    page = st.sidebar.radio(\n        \"Go to\",\n        (\"Signup/Login\", \"Dashboard\", \"Upload lungs Image\", \"View Reports\"),\n        key=\"Lungs CT-Scan disease prediction system\",\n    )\n    if page == \"Signup/Login\":\n        st.title(\"Signup/Login Page\")\n        login_or_signup = st.radio(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "session_state",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "session_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef signup(json_file_path=\"data.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "load_and_prep_image",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def load_and_prep_image(filename, img_shape=224, scale=True):\n  \"\"\"\n  Reads in an image from filename, turns it into a tensor and reshapes into\n  (224, 224, 3).\n  Parameters\n  ----------\n  filename (str): string filename of target image\n  img_shape (int): size to resize target image to, default 224\n  scale (bool): whether to scale pixel values to range(0, 1), default True\n  \"\"\"",
        "detail": "helper_functions",
        "documentation": {}
    },
    {
        "label": "make_confusion_matrix",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def make_confusion_matrix(y_true, y_pred, classes=None, figsize=(10, 10), text_size=15, norm=False, savefig=False): \n  \"\"\"Makes a labelled confusion matrix comparing predictions and ground truth labels.\n  If classes is passed, confusion matrix will be labelled, if not, integer class values\n  will be used.\n  Args:\n    y_true: Array of truth labels (must be same shape as y_pred).\n    y_pred: Array of predicted labels (must be same shape as y_true).\n    classes: Array of class labels (e.g. string form). If `None`, integer labels are used.\n    figsize: Size of output figure (default=(10, 10)).\n    text_size: Size of output figure text (default=15).",
        "detail": "helper_functions",
        "documentation": {}
    },
    {
        "label": "pred_and_plot",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def pred_and_plot(model, filename, class_names):\n  \"\"\"\n  Imports an image located at filename, makes a prediction on it with\n  a trained model and plots the image with the predicted class as the title.\n  \"\"\"\n  # Import the target image and preprocess it\n  img = load_and_prep_image(filename)\n  # Make a prediction\n  pred = model.predict(tf.expand_dims(img, axis=0))\n  # Get the predicted class",
        "detail": "helper_functions",
        "documentation": {}
    },
    {
        "label": "create_tensorboard_callback",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def create_tensorboard_callback(dir_name, experiment_name):\n  \"\"\"\n  Creates a TensorBoard callback instand to store log files.\n  Stores log files with the filepath:\n    \"dir_name/experiment_name/current_datetime/\"\n  Args:\n    dir_name: target directory to store TensorBoard log files\n    experiment_name: name of experiment directory (e.g. efficientnet_model_1)\n  \"\"\"\n  log_dir = dir_name + \"/\" + experiment_name + \"/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")",
        "detail": "helper_functions",
        "documentation": {}
    },
    {
        "label": "plot_loss_curves",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def plot_loss_curves(history):\n  \"\"\"\n  Returns separate loss curves for training and validation metrics.\n  Args:\n    history: TensorFlow model History object (see: https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/History)\n  \"\"\" \n  loss = history.history['loss']\n  val_loss = history.history['val_loss']\n  accuracy = history.history['accuracy']\n  val_accuracy = history.history['val_accuracy']",
        "detail": "helper_functions",
        "documentation": {}
    },
    {
        "label": "compare_historys",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def compare_historys(original_history, new_history, initial_epochs=5):\n    \"\"\"\n    Compares two TensorFlow model History objects.\n    Args:\n      original_history: History object from original model (before new_history)\n      new_history: History object from continued model training (after original_history)\n      initial_epochs: Number of epochs in original_history (new_history plot starts from here) \n    \"\"\"\n    # Get original history measurements\n    acc = original_history.history[\"accuracy\"]",
        "detail": "helper_functions",
        "documentation": {}
    },
    {
        "label": "unzip_data",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def unzip_data(filename):\n  \"\"\"\n  Unzips filename into the current working directory.\n  Args:\n    filename (str): a filepath to a target zip folder to be unzipped.\n  \"\"\"\n  zip_ref = zipfile.ZipFile(filename, \"r\")\n  zip_ref.extractall()\n  zip_ref.close()\n# Walk through an image classification directory and find out how many files (images)",
        "detail": "helper_functions",
        "documentation": {}
    },
    {
        "label": "walk_through_dir",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def walk_through_dir(dir_path):\n  \"\"\"\n  Walks through dir_path returning its contents.\n  Args:\n    dir_path (str): target directory\n  Returns:\n    A print out of:\n      number of subdiretories in dir_path\n      number of images (files) in each subdirectory\n      name of each subdirectory",
        "detail": "helper_functions",
        "documentation": {}
    },
    {
        "label": "calculate_results",
        "kind": 2,
        "importPath": "helper_functions",
        "description": "helper_functions",
        "peekOfCode": "def calculate_results(y_true, y_pred):\n  \"\"\"\n  Calculates model accuracy, precision, recall and f1 score of a binary classification model.\n  Args:\n      y_true: true labels in the form of a 1D array\n      y_pred: predicted labels in the form of a 1D array\n  Returns a dictionary of accuracy, precision, recall, f1-score.\n  \"\"\"\n  # Calculate model accuracy\n  model_accuracy = accuracy_score(y_true, y_pred) * 100",
        "detail": "helper_functions",
        "documentation": {}
    }
]